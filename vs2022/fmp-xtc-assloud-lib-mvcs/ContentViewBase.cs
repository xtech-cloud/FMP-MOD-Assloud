
//*************************************************************************************
//   !!! Generated by the fmp-cli 1.12.0.  DO NOT EDIT!
//*************************************************************************************

using System.Threading;
using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.Assloud.LIB.Bridge;

namespace XTC.FMP.MOD.Assloud.LIB.MVCS
{
    /// <summary>
    /// Content视图层基类
    /// </summary>
    public class ContentViewBase : View
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        /// <param name="_gid">直系的组的ID</param>
        public ContentViewBase(string _uid, string _gid) : base(_uid)
        {
            gid_ = _gid;
        }


        /// <summary>
        /// 刷新Match的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ContentListResponse的数据传输对象</param>
        public virtual void RefreshProtoMatch(Error _err, ContentListResponseDTO _dto, SynchronizationContext? _context)
        {
            var bridge = getFacade()?.getUiBridge() as IContentUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Match_{0}", _err.getCode()), _err.getMessage(), _context);
                return;
            }
            bridge?.RefreshMatch(_dto, _context);
        }


        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected ContentModel? getModel()
        {
            if(null == model_)
                model_ = findModel(ContentModel.NAME + "." + gid_) as ContentModel;
            return model_;
        }

        /// <summary>
        /// 获取直系服务层
        /// </summary>
        /// <returns>服务层</returns>
        protected ContentService? getService()
        {
            if(null == service_)
                service_ = findService(ContentService.NAME + "." + gid_) as ContentService;
            return service_;
        }

        /// <summary>
        /// 获取直系UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        protected ContentFacade? getFacade()
        {
            if(null == facade_)
                facade_ = findFacade(ContentFacade.NAME + "." + gid_) as ContentFacade;
            return facade_;
        }

        /// <summary>
        /// 直系的MVCS的四个组件的组的ID
        /// </summary>
        protected string gid_ = "";

        /// <summary>
        /// 直系数据层
        /// </summary>
        private ContentModel? model_;

        /// <summary>
        /// 直系服务层
        /// </summary>
        private ContentService? service_;

        /// <summary>
        /// 直系UI装饰层
        /// </summary>
        private ContentFacade? facade_;
    }
}

